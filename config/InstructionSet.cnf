# contains the instruction set for the cpu emulator
# instruction format: [opcode] [instruction] [destination] [source]
# operand values [r | m | imm ] for [register | memory | immediate]
# for 2 operand instructions, the order is [destination] [source]
# for 1 operand instructions such as jumps, the operand is the location of the address of the instruction
# being jumped to and the comparison result is always in r1
# if the second operand is a memory location, the memory address is encoded after the instruction
# the encoding of the instruction is as follows:
#
#  8-bit     8-bit      64-bit(opt)      64-bit(opt)
# +------------------------------------------------+
# | opcode | modrr |     address     |     imm     | 
# +------------------------------------------------+
# the [modrr] byte is encoded as follows (mode represents addressing mode,
#  the first bit represents the addressing mode for the destination register
#  the second bit represents the addressing mode for the source register
#  value of 1 indicates that register direct addressing is used
#  value of 0 indicates that register indirect addressing is used
#  reg1 is the source register, reg2 is the destination register):
#
#   2-bit   3-bit   3-bit
#  +-----------------------+
#  | mode |  dest  |  src  |
#  +-----------------------+

0x00 mov r r 
0x01 mov r m
0x02 mov m r
0x03 mov r imm
0x04 add r r
0x05 add r m
0x06 add r imm
0x07 sub r r
0x08 sub r m
0x09 sub r imm
0x0A mul r r
0x0B mul r m
0x0C mul r imm
0x0D div r r
0x0E div r m
0x0F div r imm
0x10 cmp r r
0x11 cmp r m
0x12 cmp r imm
0x13 and r r
0x14 and r m
0x15 and r imm
0x16 or r r
0x17 or r m
0x18 or r imm
0x19 not r
0x1A xor r r
0x1B xor r m
0x1C xor r imm
0x1D jmp r
0x1E jmp m
0x1F jmp imm
0x20 je r
0x21 je m
0x22 je imm
0x23 jne r
0x24 jne m
0x25 jne imm
0x26 jge r
0x27 jge m
0x28 jge imm
0x29 jle r
0x2A jle m
0x2B jle imm
0x2C write r
0x2D read r
0x2E halt
